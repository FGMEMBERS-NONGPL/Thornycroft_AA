
#Turret by 5H1N0B1
#GNU licence



#turret Gun class
var turret=
{
        #create new object
        new: func(name,index, view_number,heading_path,pitch_path,minhead, maxhead,minpitch, maxpitch)
        {
                # copy the turret object
		var m = { parents: [turret] };
		m.name = name;
		m.index = index;
		m.view = view_number;
		m.viewheading = props.globals.getNode("/sim/current-view/heading-offset-deg");
		m.viewpitch = props.globals.getNode("/sim/current-view/pitch-offset-deg");
                m.loop_running = 0;
		
		#Heading management
		m.heading = props.globals.getNode(heading_path);
		m.heading_Min = minhead;
		m.heading_Max = maxhead;
		m.LastHeading = 0;
		
		#Ptich management
		m.pitch   = props.globals.getNode(pitch_path);
		m.pitch_Min = minpitch;
		m.pitch_Max = maxpitch;
		m.LastPitch = 0;
		
		#Self Update period
		m.UPDATE_PERIOD = 0.05 ; # update interval for engine init() functions
		
		#SetListener
		m.viewChange   = nil;
		m.viewPitch    = nil;
		m.viewHeading  = nil;
		
		
		return m;
	},
		
	#In case of new without limitations arguments	
	#new: func(name,index, view_number,heading_path,pitch_path)
        #{
	#	var m = turret.new(name,index,view_number,heading_path, pitch_path,0 ,0 ,0 ,0);
	#	return m;
	#},
	#move the turret
	move: func
	{
	        print("L4");
	        #heading limitations
	        var Myheading = me.viewheading.getValue();
	        #if(math.abs( Myheading - me.LastHeading) >1){   
	                Myheading = me.limit(Myheading,me.heading_Min,me.heading_Max,me.LastHeading);
                        me.heading.setValue(Myheading); 
         	        me.LastHeading = Myheading;
         	#}

	        #pitch limitations
	        var Mypitch = me.viewpitch.getValue();
	        #if(math.abs( Mypitch - me.LastPitch) >1){   
	                Mypitch = me.limit(Mypitch,me.pitch_Min,me.pitch_Max,me.LastPitch);
                        me.pitch.setValue(Mypitch);
                        me.LastPitch = Mypitch;
                #}
                
                #Free for anotherupdate
                me.loop_running = 0;

	},
	
	#Tool : limitations func.
	limit: func(value, min, max, lastValue)
	{
	     var tempo = value;
	     if(max != min) {
                if(max>min){                
	           if(value>max){tempo = max;}
	           if(value<min){tempo = min;}
	         }else{
	           if((value>max) and (value<min) and (math.abs(lastValue-max)>math.abs(lastValue - min))){
	                tempo = min;
	           }else{
	                tempo = max;
	            }
	         }
	

	     }
	     #print("value :",value," tempo :",tempo, "min :", min," max :",max);
	     return tempo
	},
	

        #Call the update loop
        init: func
        {
              #settimer(loop, 0);
              if(me.viewChange == nil){
                  me.viewChange = setlistener("sim/current-view/view-number", func(currentView){
                              print("L1 ", me.loop_running);
                              
                                     
                              if(currentView.getValue() == me.view){
                              me.update();
                              #me.listening();

                              
                              }
              
                  }, 0, 0);
              }
		
        },
        
        #TRY : Here is the listening function...Strange result, not enough smooth
        listening: func 
        {
                if(me.viewPitch == nil){
                   me.viewPitch = setlistener("/sim/current-view/pitch-offset-deg", func{
                      print("L2 ", me.loop_running);
                      if(me.loop_running==0){
                             me.loop_running = 1;
                             #settimer(me.move(),me.UPDATE_PERIOD);
                             me.move();
                       }
                   }, 0, 0);
                }
                if(me.viewHeading == nil){
                   me.viewHeading = setlistener("/sim/current-view/heading-offset-deg", func{
                      print("L3 ",me.loop_running);
                      if(me.loop_running==0){
                             me.loop_running = 1;
                             #settimer(me.move(),me.UPDATE_PERIOD);
                             me.move();
                       }
                   }, 0, 0);
                }                
        
        
        },
        #Create the update loop and the listener -->The ideal would be to put a setlistener/view
        update: func
        {
                if (me.loop_running) return;
		#print("2");
		me.loop_running = 1;
		var loop = func
		{
                       print("3");
                       me.move();
                       settimer(loop, me.UPDATE_PERIOD);
                }
                settimer(loop, me.UPDATE_PERIOD);
        },
        update_2: func
        {        
              

        
        },
        #Set/change update period if necessary
        update_period: func (update_periode)
        {
                me.UPDATE_PERIOD = update_periode;
        }
};
        
	   
	  #  nom     : observerturret
	  #  index   :  0 <-Il s'agit de la premiere tourelle, la variable est definie dans sim/model/turret[0]
	  #  view    :  9 Il s'agit de l'index reel de la view, disponible ici : /sim/current-view/view-number
	  #  heading : path de la variable heading du model 3D
	  #  pitch   : path de la variable pitch du model 3D
	  
	  #heading, min max : limitations en heading. Si max = min alors pas de limitation
	  #pitch, min max : limitations en pitch. Si max = min alors pas de limitation
	  
	  #creation de l'objet
          var observerturret = turret.new("observerturret",0,9,"sim/model/turret[0]/heading","sim/model/turret[0]/pitch",0,0,0,90);
          
          #var observerturret = turret.new("observerturret",0,9,"sim/model/turret[0]/heading","sim/model/turret[0]/pitch");
          
          #init de l'objet
          setlistener("sim/signals/fdm-initialized", func
         {
             observerturret.init();	
         }, 0, 0);		
		
	#Note : pour rajouter une tourelle, s'assurer que les variables soient bonne, que la 3D soit presente. Ensuite Il suffit d'ajouter : 
	# var tourelledetoit = turret.new("TourelledeToit",0,9,"sim/model/turret[0]/heading","sim/model/turret[0]/pitch");
	# setlistener("sim/signals/fdm-initialized", func
	#    tourelledetoit.init();
        #}, 0, 0);
        
        #la gestion des tir n'a pas encore en faite		
		
		
		
		
		
		
		
